[ src ]

url = https://www.kernel.org/pub/linux/kernel/v5.x/linux-<ver>.tar.xz
src_type = tar
src_dirname = <prog>-<ver>



[ vars ]



[ generic ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = /home/xx/kernel/make-config . /home/xx/kernel/generic && make
pkg_create = mkdir <pkg_dir>/boot/ &&
	cp -av arch/x86/boot/bzImage <pkg_dir>/boot/vmlinuz-generic &&
	cp -av System.map <pkg_dir>/boot/System.map-generic &&
	cp -av .config <pkg_dir>/boot/config-generic

subpkg_sysmap = /boot/System.map*



[ custom ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure = 

# build for every config in /home/xx/cfg/user_kernel/
# first round of make-config is to check if configs are correct
build = mkdir build &&
	for config_file in $(find /home/xx/cfg/user_kernel/[a-z]* -type f); do
		/home/xx/kernel/make-config . "${config_file}" || exit 1;
	done &&
	for config_file in $(find /home/xx/cfg/user_kernel/[a-z]* -type f); do
		/home/xx/kernel/make-config . "${config_file}" &&
		machine="$(basename "${config_file}")" &&
		echo "* building for ${machine}..." &&
		make &&
		mv -v arch/x86/boot/bzImage build/vmlinuz-${machine} &&
		mv -v .config build/config-${machine} &&
		mv -v System.map build/System.map-${machine} ||
		exit 1;
	done

pkg_create = mkdir <pkg_dir>/boot &&
	cp -av build/* <pkg_dir>/boot ||
	touch <pkg_dir>/boot/empty

subpkg_sysmap = /boot/System.map*



[ nvidia ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = /home/xx/kernel/make-config . /home/xx/cfg/user_kernel/_nvidia && make
pkg_create = mkdir <pkg_dir>/boot/ &&
	cp -av arch/x86/boot/bzImage <pkg_dir>/boot/vmlinuz-nvidia &&
	cp -av System.map <pkg_dir>/boot/System.map-nvidia &&
	cp -av .config <pkg_dir>/boot/config-nvidia &&

	mkdir -p <pkg_dir>/usr/lib/linux-nv-source &&
	rm -rf	arch/{arm,arm64,powerpc,riscv}
		arch/{mips,m68k,sparc,sh,s390,ia64,parisc}
		arch/{alpha,xtensa,um,arc,nds32,csky,microblaze,openrisc}
		arch/{hexagon,nios2,h8300}
		drivers/gpu/drm/{amd,i915,nouveau,radeon}
		drivers/{net,media,scsi,usb}
		scripts/dtc/include-prefixes/{arm,arm64,powerpc,riscv}
		scripts/dtc/include-prefixes/{mips,nios2,sh,xtensa}
		scripts/dtc/include-prefixes/{arc,h8300,microblaze,openrisc}
		Documentation
		tools/testing &&
	mv * .[!.]* <pkg_dir>/usr/lib/linux-nv-source

# sources and compiled objects are saved as an 'nvidia_source' pkgset
subpkg_source = /usr/lib/linux-nv-source
subpkg_sysmap = /boot/System.map*



[ perf ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = cd tools/perf && make
pkg_create = cd tools/perf && make DESTDIR=<pkg_dir>/usr/ install &&
	mv -v <pkg_dir>/usr/lib64/* <pkg_dir>/usr/lib/ &&
	rmdir -v <pkg_dir>/usr/lib64 &&
	rm -r <pkg_dir>/usr/libexec/perf-core/tests



[ headers ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = make headers &&
	find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = mkdir <pkg_dir>/usr && cp -a usr/include/ <pkg_dir>/usr/



[ musl_headers ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = make KBUILD_USERCFLAGS=-static-pie headers &&
	find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = cp -a usr/include/ <pkg_dir>/



[ bootstrap_headers_cross ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = make headers &&
	find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = mkdir <pkg_dir>/usr && cp -a usr/include/ <pkg_dir>/usr/



[ musl_headers_1_cross ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = make headers &&
	find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = mkdir -p <pkg_dir>/cross_tools/${TARGET_TRIPLET} && 
	cp -a usr/include/ <pkg_dir>/cross_tools/${TARGET_TRIPLET}/



[ musl_headers_2_cross ]

env =
prepare = tar --no-same-owner -xf <src_path> -C <tmp_dir>
configure =
build = make KBUILD_USERCFLAGS='-static-pie -I<root_dir>/tools/include' headers
	&& find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = mkdir -p <pkg_dir>/tools/ && 
	cp -a usr/include/ <pkg_dir>/tools/



[ musl_headers_init ]

env =

# adjust the build system after cross compiling
prepare = ln -sv /tools/bin/{bash,cat,dd,echo,ln,pwd,rm,stty} /bin;
	ln -sv /tools/bin/{install,perl} /bin;
	ln -sv /tools/lib/libgcc.a /lib;
	ln -sv /tools/lib/libstdc++.a /lib;
	ln -sv bash /bin/sh;
	rmdir /usr/bin; rm /usr/bin;
	ln -sv ../bin /usr/bin;
	rmdir /tools/usr; rm /tools/usr; 
	ln -sv ../tools /tools/usr;
	gcc -dumpspecs |
	sed -e '/-D_POSIX_SOURCE/ s|$| -isystem /include|g' > specs &&
	mv  specs "$(dirname $(gcc -print-libgcc-file-name))/specs" &&
	tar --no-same-owner -xf <src_path> -C <tmp_dir>

configure =
build = make KBUILD_USERCFLAGS='-static-pie -I<root_dir>/tools/include' headers
	&& find usr/include -name '.*' -delete &&
	rm usr/include/Makefile

pkg_create = cp -a usr/include/ <pkg_dir>/

